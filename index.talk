[slide cover]
![]($ROOT/images/cover_pimped.png)

<style>
	.slide pre code {
	  line-height: 30px;
		font-size: 20px;
	}
</style>

[slide]
## About us

>  **HEADS Project**  
> *European Union Seventh Framework Program (FP7/2007-2013)*

- *Authors*
 - **Brice Morin**: *research scientist* at SINTEF ICT, Oslo, Norway
 - **Maxime Tricoire**: *research engineer* at INRIA, Rennes, France

// list all the 9 authors on the paper ?

[slide]
## Overview

* <span style="font-weight: bold">Motivation</span>  
 :fa-arrow-circle-o-right: **why** do we need *dynamically reconfigurable architectures* for SPAs
* <span style="font-weight: bold">Idea</span>  
 :fa-arrow-circle-o-right: **what**  we want to achieve with our approach
* <span style="font-weight: bold">Proposition</span>  
 :fa-arrow-circle-o-right: **how** we propose to enable this idea
* <span style="font-weight: bold">Validation</span>  
 :fa-arrow-circle-o-right: **how** does this approach performs?

[slide shout]
## **>** Motivation

[slide]
## **>** Why Single-Page Application
* software are moving from:
  * traditional :fa-desktop: desktop-based applications
  * to client-server architectures hosted in the cloud :fa-cloud:


* Web browsers :fa-chrome: :fa-firefox: :fa-safari: behave as application containers
	* E-mail clients, Word processors,  Music Collection Managers, IDEs, ...

[slide]
## **>** Why Single-Page Application
 - SPAs are the new desktop applications  
:fa-arrow-circle-o-right: **fit** on a single web page  
:fa-arrow-circle-o-right: provide a **fluid** user experience  by avoiding page reloads


- **But**, unlike well-known desktop applications such as *Eclipse*  
:fa-arrow-circle-o-right: no :fa-plug: pluggable architecture pattern frameworks  
:fa-arrow-circle-o-right: no **dynamic** component loading **at runtime**

[slide]
## **>** Why Single-Page Application
 > Challenges
 
 * create a  **component-based** platform
 * that can adapt **at runtime**
 * according to a **configuration model**
 * within a **Web browser**

[slide shout]
## **>** Idea

[slide]
## **Drive** the architecture of an **SPA** using **model@run.time**

<img src="$ROOT/images/server.png" width="150px" style="position:absolute; top: 300px"/>
<span class="kevOrange fa fa-arrows-h" style="font-size: 55px; position: absolute; top: 350px; left: 300px"></span>
<img src="$ROOT/images/modeling_space_graph.jpg" width="100px" style="position:absolute; top: 300px; left: 400px"/>
<span class="kevOrange fa fa-arrows-h" style="font-size: 55px; position: absolute; top: 350px; left: 560px"></span>
<img src="$ROOT/images/devices.png" width="200px" style="position:absolute; top: 300px; right: 150px"/>

[slide]
## **>** Idea

 * Single-Page Application **container**
 * that leverages **models@run.time** to provide **distribution** and **adaptability** 
 * :fa-download: **downloads**, :fa-spinner: **installs** and :fa-play: **runs** the necessary **components** by itself
 * provides a **composable** user-interface **dashboard** :fa-desktop:

:fa-arrow-circle-o-right: **everything from a Web browser** without page reloads

[slide shout]
## **>** Proposition

[slide]
## **>** Proposition enablers

* **Frontend** libraries to create an SPA
* **Kevoree** to manage **model@run.time**
* module **bundlers** to create standalone component
* **contract-aware components** using Kevoree
* user-interface **DSL** to manage component **layout**

[slide shout]
## **>** Frontend libraries

[slide]
## **>** Frontend libraries for SPA
 * **AngularJS** framework is made for Single-Page Application
 * Third-party libraries: **Gridster.js**, **Bootstrap**, **CodeMirror**, ...
 * Use **iframes** to **sandbox** components code

[slide shout]
## **>** Model@run.time

[slide]
## **>** The model@run.time paradigm
* extends the usage of **models** to the **runtime environment**
* models@run.time are **continuously updated** to reflect the state of a system during its **execution (runtime)**
* the goal is to manage the complexity of **adaptive software systems**
* often **runtime models** are used to support **decision-making** and **reasoning processes** of self-adaptive systems

[slide]
## **>** Model@run.time with Kevoree

<div style="position: absolute; top: 180px; bottom: 20px; left: 50px; width: 45%; font-size: 18px;">
  <span style="font-size: 24px">**meta-model (static)**</span>  
	<span style="font-size: 18px">defined as *EMF/Ecore, UML, DSL, ...*</span>  
	<span style="font-size: 18px">purpose: **domain definition**</span>  
	<div style="margin-left: 20px">
	  <img src="$ROOT/images/model.png" width="60%"/>
	  <img src="$ROOT/images/textual_model.png" width="60%"/>
	</div>
  <span class="kevIcon kevOrange fa fa-long-arrow-right" style="font-size:65px;position:absolute;right:40px;top:200px;"/></span>
</div>

<div style="position: absolute;  top: 180px; bottom: 20px; left: 50%; width: 45%; padding-left: 8px; font-size: 18px;">
  <span style="font-size: 24px">**model (dynamic)**</span>  
	<span style="font-size: 18px">implemented as *Java, JavaScript, TypeScript, C#, ...*</span>  
	<span style="font-size: 18px;">purpose: **runtime usage**</span>  
	<img src="$ROOT/images/generated_mode.png" width="200px"/>
  <img src="$ROOT/images/generated_mode.png" width="200px" style="position:absolute; left:20px; top: 131px; border-top: 1px solid white; border-left: 1px solid white" />
  <img src="$ROOT/images/generated_mode.png" width="200px" style="position:absolute; left:33px; top: 143px; border-top: 1px solid white; border-left: 1px solid white"/>  
	<span class="kevOrange" style="font-size:120px;position: absolute; left: 235px; top: 90px">&#125;</span>
	<span style="position: absolute; top: 120px; left: 280px">**object graph**</span>
	<img src="$ROOT/images/modeling_space_graph.jpg" width="100px" style="position: absolute; left: 280px; top: 150px" />
	</div>
</div>

[slide shout]
## **>** Component bundles

[slide]
## **>** Component bundles

* **server-side** modules use **CommonJS** (Node.js)
* are meant to be **split** in a multitude of sub-modules (dependencies)
* CommonJS is **not** the standard for **Web browsers** :fa-chrome: :fa-firefox: :fa-safari:
* the more dependencies they have the bigger the graph gets

:fa-arrow-circle-o-right: **proposition**: use modules as **standalone bundles** :fa-archive:

[slide]
## **>** What is a Web bundler ?
* tool such as **Browserify** or **WebPack**
* takes modules with **dependencies** and generates **static assets**
* using **transformations** to comply with Web browsers :fa-chrome: :fa-firefox: :fa-safari:
* outputs :fa-file: **one single**  file

:fa-arrow-circle-o-right: using bundles **narrows** the download **down to one** request per component

[slide shout]
## **>** Contract-aware

[slide]
## **>** Contract-aware components

* use of **Kevoree** to define **contracts**

```js
var ConsolePrinter = AbstractComponent.extend({
  in_input: function (msg) {
	  console.log('> '+msg);
  }
});
```
* you define an **input** port using the naming convention **in_**

[slide]
## **>** Contract-aware components

* use of **Kevoree** to define **contracts**

```java
@Component
public class ConsolePrinter {
  @Input
  public void input(String message) {
	System.out.println('> ' + message);
  }
}
```

* in **Java** or **TypeScript**, you define **inputs** using the **@Input** annotation

[slide]
## **>** Contract-aware components

* define **parameters**
```java
        @Param
    private String myParam;
```
* provide **lifecycle** methods:
```java
        @Start
    public void start() {
	  // this will be executed when the component as to start
    }
```

[slide]
## **>** Contract-aware components

<img src="$ROOT/images/editor.png" height="400px" style="position: absolute; left: 200px" />

[slide shout]
## **>** Component UI

[slide]
## **>** Component UI: AngularJS

* **AngularJS** is developped by **Google**
* **widely** used front-end **framework**
* gives **2-way data-binding** between HTML :fa-arrows-h: JavaScript model

:fa-arrow-circle-o-right: re-use **community adopted** Web technologies

[slide]
## **>** Component UI: AngularJS

* every component defines a :fa-cog: **controller** which is bound to the :fa-eye: **view**
* so the view can **adapt** according to:
 *  the component's **lifecycle**
 *  **incoming**/**outcoming** messages 

:fa-arrow-circle-o-right: reactive component's UI

[slide shout]
## **>** User-interface DSL

[slide]
## **>** User-interface DSL

<ul style="margin: 0">
  <li>**describe** how component should **render**</li>
</ul>

<pre style="margin-bottom: 10px">
<code style="font-size: 16px; line-height: 20px"> {
   "layout": {
     "width": 2,
     "height": 1
   }
 }</code>
</pre>

<ul style="margin: 0">
  <li>define **third-party** scripts & styles to load</li>
</ul>

<pre style="margin-bottom: 10px">
<code style="font-size: 16px; line-height: 20px"> {
   "styles": [ 'https://le-cdn.org/my-style.css' ],
   "scripts": [ 'https://le-cdn.org/my-lib.js' ]
 }</code>
</pre>

<ul style="margin: 0">
  <li>list **AngularJS** modules to load</li>
</ul>

<pre style="margin-bottom: 10px">
<code style="font-size: 16px; line-height: 20px"> { "ngModules": [ 'ui.bootstrap' ] }</code>
</pre>
</pre>

[slide]
## **>** Introducing KevoreeJS in the Browser
 
<img src="$ROOT/images/runjs.png" width="700px" style="margin-left: 50px" />

[slide shout]
## **>** Evaluation

[slide]
## **>** Evaluation

> what is the **overhead** brought by our approach in terms of:  
>  **LoC**  
>  **reusable components**  
>  **time penalty**  

:fa-arrow-circle-o-right: create a **sensor-based dashboard** using KevoreeJS

[slide]
## **>** Evaluation

**LoC**  

* KevoreeJS core: **56,671** LoC 
 * :fa-pencil: 15,584 are **hand-written**
 * the rest is **generated** by Kevoree
 * based on the **meta-model**

[slide]
## **>** Evaluation

**Reusable components**  

* to create the **sensor-based dashboard** we've created:
 * **8** components
 * **3** channels
 * **3** groups
* all those components are **published** & **free** and can be re-used by **anyone**

[slide]
## **>** Evaluation

**Time penalty**  

* starting the **sensor-based dashboard** took
* less than **2 seconds**
* from scratch on a ** i7**,  **16Gb** and **SSD**
* and **677ms** once components **cached**

:fa-arrow-circle-o-right: the **main time :fa-clock-o: consuming**  action is component downloading

[slide]
## **>** Conclusion

 * wa have created a  **component-based** platform
 * that can adapt **at runtime**
 * according to a **configuration model**
 * within a **Web browser**

:fa-arrow-circle-o-right: available at http://runjs.kevoree.org

[slide shout]
## **>** Thank you
<h2 style="font-size: 60px; margin-top: 150px">Questions <span class="kevOrange fa fa-question-circle"></span></h2>
