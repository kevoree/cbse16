[slide cover]
![]($ROOT/images/cover_pimped.png)

<style>
	.slide pre code {
	  line-height: 30px;
		font-size: 20px;
	}
</style>

[slide]
## About us

>  **HEADS Project**  
> *European Union Seventh Framework Program (FP7/2007-2013)*

- *Authors*
 - **Brice Morin**: *research scientist* at SINTEF ICT, Oslo, Norway
 - **Maxime Tricoire**: *research engineer* at INRIA, Rennes, France

// list all the 9 authors on the paper ?

[slide]
## Overview

* <span style="font-weight: bold">Motivation</span>  
 :fa-arrow-circle-o-right: **why** do we need *dynamically reconfigurable architectures* for SPAs
* <span style="font-weight: bold">Idea</span>  
 :fa-arrow-circle-o-right: **what**  we want to achieve with our approach
* <span style="font-weight: bold">Proposition</span>  
 :fa-arrow-circle-o-right: **how** we propose to enable this idea
* <span style="font-weight: bold">Validation</span>  
 :fa-arrow-circle-o-right: **how** does this approach performs?

[slide shout]
## **>** Motivation

[slide]
## **>** Why Single-Page Application
* software are moving from:
  * traditional :fa-desktop: desktop-based applications
  * to client-server architectures hosted in the cloud :fa-cloud:


* Web browsers :fa-chrome: :fa-firefox: :fa-safari: behave as application containers
	* E-mail clients, Word processors,  Music Collection Managers, IDEs, ...

[slide]
## **>** Why Single-Page Application
 - SPAs are the new desktop applications  
:fa-arrow-circle-o-right: **fit** on a single web page  
:fa-arrow-circle-o-right: provide a **fluid** user experience  by avoiding page reloads


- **But**, unlike well-known desktop applications such as *Eclipse*  
:fa-arrow-circle-o-right: no :fa-plug: pluggable architecture pattern frameworks  
:fa-arrow-circle-o-right: no **dynamic** component loading **at runtime**

[slide]
## **>** Why Single-Page Application
 > Challenges
 
 * create a  **component-based** platform
 * that can adapt **at runtime**
 * according to a **configuration model**

[slide]
## **>** The models@run.time paradigm
* extends the usage of **models** to the **runtime environment**
* models@run.time are **continuously updated** to reflect the state of a system during its **execution (runtime)**
* the goal is to manage the complexity of **adaptive software systems**
* often **runtime models** are used to support **decision-making** and **reasoning processes** of self-adaptive systems

[slide]
## **>** Models@run.time with Kevoree

<div style="position: absolute; top: 180px; bottom: 20px; left: 50px; width: 45%; font-size: 18px;">
  <span style="font-size: 24px">**meta-model (static)**</span>  
	<span style="font-size: 18px">defined as *EMF/Ecore, UML, DSL, ...*</span>  
	<span style="font-size: 18px">purpose: **domain definition**</span>  
	<div style="margin-left: 20px">
	  <img src="$ROOT/images/model.png" width="60%"/>
	  <img src="$ROOT/images/textual_model.png" width="60%"/>
	</div>
  <span class="kevIcon kevOrange fa fa-long-arrow-right" style="font-size:65px;position:absolute;right:40px;top:200px;"/></span>
</div>

<div style="position: absolute;  top: 180px; bottom: 20px; left: 50%; width: 45%; padding-left: 8px; font-size: 18px;">
  <span style="font-size: 24px">**model (dynamic)**</span>  
	<span style="font-size: 18px">implemented as *Java, JavaScript, TypeScript, C#, ...*</span>  
	<span style="font-size: 18px;">purpose: **runtime usage**</span>  
	<img src="$ROOT/images/generated_mode.png" width="200px"/>
  <img src="$ROOT/images/generated_mode.png" width="200px" style="position:absolute; left:20px; top: 131px; border-top: 1px solid white; border-left: 1px solid white" />
  <img src="$ROOT/images/generated_mode.png" width="200px" style="position:absolute; left:33px; top: 143px; border-top: 1px solid white; border-left: 1px solid white"/>  
	<span class="kevOrange" style="font-size:120px;position: absolute; left: 235px; top: 90px">&#125;</span>
	<span style="position: absolute; top: 120px; left: 280px">**object graph**</span>
	<img src="$ROOT/images/modeling_space_graph.jpg" width="100px" style="position: absolute; left: 280px; top: 150px" />
	</div>
</div>

[slide shout]
## **>** Idea

[slide]
## Extend Kevoree to **client-based** platforms such as **Web browsers**

<img src="$ROOT/images/server.png" width="150px" style="position:absolute; top: 300px"/>
<span class="kevOrange fa fa-arrows-h" style="font-size: 55px; position: absolute; top: 350px; left: 300px"></span>
<img src="$ROOT/images/modeling_space_graph.jpg" width="100px" style="position:absolute; top: 300px; left: 400px"/>
<span class="kevOrange fa fa-arrows-h" style="font-size: 55px; position: absolute; top: 350px; left: 560px"></span>
<img src="$ROOT/images/devices.png" width="200px" style="position:absolute; top: 300px; right: 150px"/>

[slide]
## **>** Idea

 * Single-Page Application **container**
 * that leverages **models@run.time** to provide **distribution** and **adaptability** 
 * :fa-download: **download**, :fa-spinner: **install** and :fa-play: **run** the necessary **components** by itself
 * provide a **composable** user-interface **dashboard** :fa-desktop:

:fa-arrow-circle-o-right: **everything from a Web browser** without page reloads

[slide shout]
## **>** Proposition

[slide]
## **>** Proposition


* standalone component **bundles**
* **contract-aware components** using Kevoree
* **AngularJS** defined user-interface
*  user-interface **DSL** (JSON metadata)

// peut-être zappé le côté UI et plus parler du module loading ?  
// globallement plus parler des challenges du papier ?

[slide shout]
## **>** Component bundles

[slide]
## **>** Component bundles

* **server-side** modules use **CommonJS** (Node.js)
* are meant to be **split** in a multitude of sub-modules (dependencies)
* CommonJS is **not** the standard for **Web browsers** :fa-chrome: :fa-firefox: :fa-safari:
* the more dependencies they have the bigger the graph gets

:fa-arrow-circle-o-right: **proposition**: use modules as **standalone bundles** :fa-archive:

[slide]
## **>** What is a standalone bundle ?

* takes modules with **dependencies** and generates **static assets**
* using **transformations** to comply with Web browsers :fa-chrome: :fa-firefox: :fa-safari:
* outputs :fa-file: **one single**  file

:fa-arrow-circle-o-right: using bundles **narrows** the download **down to one** request per component

[slide shout]
## **>** Contract-aware

[slide]
## **>** Contract-aware components

* use of **Kevoree** to define **contracts**

```js
var ConsolePrinter = AbstractComponent.extend({
  // naming convention "in_" is how you define an input port
  in_input: function (msg) {
	  console.log('> '+msg);
  }
});
```

[slide]
## **>** Contract-aware components



```js
var Ticker = AbstractComponent.extend({
  // this method is called on start-up
  start: function () {
    var self = this;
    setTimeout(function () {
	    // sends random number on output port every 2 seconds
	    self.out_tick(Math.random()*100));
    }, 2000);
  },

  out_tick: function (msg) { /* redefined at runtime */ }
});
```

[slide]
## **>** Contract-aware components

<img src="$ROOT/images/editor.png" height="400px" style="position: absolute; left: 200px" />

[slide shout]
## **>** AngularJS UI

[slide]
## **>** AngularJS User-interface

* supported by **Google**
* **widely** used front-end **framework**
* gives **2-way data-binding** between HTML :fa-arrows-h: JavaScript model

:fa-arrow-circle-o-right: re-use **community adopted** Web technologies

[slide]
## **>** User-interface DSL

* **describe** how component should **render**
* define **third-party** scripts & styles to load
* list **AngularJS** modules to load

```json
{
  "layout": {
    "width": 2,
    "height": 1
  }
}
```

[slide]
## New Slide
 - your content here...
